--- origsrc/mimalloc/CMakeLists.txt	2019-06-27 13:49:27.000000000 +0900
+++ src/mimalloc/CMakeLists.txt	2019-06-27 13:58:35.396415400 +0900
@@ -109,7 +109,11 @@ endif()
 
 # shared library
 add_library(mimalloc SHARED ${mi_sources})
-set_target_properties(mimalloc PROPERTIES VERSION ${mi_version} NO_SONAME "YES" OUTPUT_NAME ${mi_basename} )
+if(CYGWIN)
+  set_target_properties(mimalloc PROPERTIES VERSION ${mi_version} SOVERSION 0 OUTPUT_NAME ${mi_basename} )
+else()
+  set_target_properties(mimalloc PROPERTIES VERSION ${mi_version} NO_SONAME "YES" OUTPUT_NAME ${mi_basename} )
+endif()
 target_compile_definitions(mimalloc PRIVATE ${mi_defines} MI_SHARED_LIB MI_SHARED_LIB_EXPORT)
 if(MI_OVERRIDE MATCHES "ON")
   target_compile_definitions(mimalloc PRIVATE MI_MALLOC_OVERRIDE)
@@ -119,43 +123,67 @@ target_include_directories(mimalloc PRIV
 target_link_libraries(mimalloc PUBLIC ${mi_libraries})
 
 # static library
-add_library(mimalloc-static STATIC ${mi_sources})
-if(WIN32)
-  # When building both static and shared libraries on Windows, a static library should use a
-  # different output name to avoid the conflict with the import library of a shared one.
-  string(REPLACE "mimalloc" "mimalloc-static" mi_output_name ${mi_basename})
-  set_target_properties(mimalloc-static PROPERTIES OUTPUT_NAME ${mi_output_name})
-else()
-  set_target_properties(mimalloc-static PROPERTIES OUTPUT_NAME ${mi_basename})
+if(NOT BUILD_SHARED_LIBS)
+  add_library(mimalloc-static STATIC ${mi_sources})
+  if(WIN32)
+    # When building both static and shared libraries on Windows, a static library should use a
+    # different output name to avoid the conflict with the import library of a shared one.
+    string(REPLACE "mimalloc" "mimalloc-static" mi_output_name ${mi_basename})
+    set_target_properties(mimalloc-static PROPERTIES OUTPUT_NAME ${mi_output_name})
+  else()
+    set_target_properties(mimalloc-static PROPERTIES OUTPUT_NAME ${mi_basename})
+  endif()
+  target_compile_definitions(mimalloc-static PRIVATE ${mi_defines} MI_STATIC_LIB)
+  if(NOT WIN32 AND MI_OVERRIDE MATCHES "ON")
+    # It is only possible to override malloc on Windows when building as a DLL. (src/alloc-override.c)
+    target_compile_definitions(mimalloc-static PRIVATE MI_MALLOC_OVERRIDE)
+  endif()
+  target_compile_options(mimalloc-static PRIVATE ${mi_cflags})
+  target_include_directories(mimalloc-static PRIVATE include PUBLIC $<INSTALL_INTERFACE:${mi_install_dir}/include>)
+  target_link_libraries(mimalloc-static PUBLIC ${mi_libraries})
 endif()
-target_compile_definitions(mimalloc-static PRIVATE ${mi_defines} MI_STATIC_LIB)
-if(NOT WIN32 AND MI_OVERRIDE MATCHES "ON")
-  # It is only possible to override malloc on Windows when building as a DLL. (src/alloc-override.c)
-  target_compile_definitions(mimalloc-static PRIVATE MI_MALLOC_OVERRIDE)
-endif()
-target_compile_options(mimalloc-static PRIVATE ${mi_cflags})
-target_include_directories(mimalloc-static PRIVATE include PUBLIC $<INSTALL_INTERFACE:${mi_install_dir}/include>)
-target_link_libraries(mimalloc-static PUBLIC ${mi_libraries})
 
 # install static and shared library, and the include files
-install(TARGETS mimalloc EXPORT mimalloc DESTINATION ${mi_install_dir} LIBRARY NAMELINK_SKIP)
-install(TARGETS mimalloc-static EXPORT mimalloc DESTINATION ${mi_install_dir})
-install(FILES include/mimalloc.h DESTINATION ${mi_install_dir}/include)
-install(FILES cmake/mimalloc-config.cmake DESTINATION ${mi_install_dir}/cmake)
-install(FILES cmake/mimalloc-config-version.cmake DESTINATION ${mi_install_dir}/cmake)
-install(EXPORT mimalloc DESTINATION ${mi_install_dir}/cmake)
-install(FILES "$<TARGET_FILE:mimalloc>" DESTINATION lib)  # duplicate the .so in the lib directory (unversioned)
+if(CYGWIN)
+  install(TARGETS mimalloc EXPORT mimalloc RUNTIME DESTINATION bin ARCHIVE DESTINATION lib LIBRARY NAMELINK_SKIP)
+else()
+  install(TARGETS mimalloc EXPORT mimalloc DESTINATION ${mi_install_dir} LIBRARY NAMELINK_SKIP)
+endif()
+if(NOT BUILD_SHARED_LIBS)
+  install(TARGETS mimalloc-static EXPORT mimalloc DESTINATION ${mi_install_dir})
+endif()
+if(CYGWIN)
+  install(FILES include/mimalloc.h DESTINATION include)
+  install(FILES cmake/mimalloc-config.cmake DESTINATION lib/cmake/mimalloc)
+  install(FILES cmake/mimalloc-config-version.cmake DESTINATION lib/cmake/mimalloc)
+  install(EXPORT mimalloc DESTINATION lib/cmake/mimalloc)
+else()
+  install(FILES include/mimalloc.h DESTINATION ${mi_install_dir}/include)
+  install(FILES cmake/mimalloc-config.cmake DESTINATION ${mi_install_dir}/cmake)
+  install(FILES cmake/mimalloc-config-version.cmake DESTINATION ${mi_install_dir}/cmake)
+  install(EXPORT mimalloc DESTINATION ${mi_install_dir}/cmake)
+  install(FILES "$<TARGET_FILE:mimalloc>" DESTINATION lib)  # duplicate the .so in the lib directory (unversioned)
+endif()
 
 # single object file for more predictable static overriding
-add_library(mimalloc-obj OBJECT src/static.c)
-target_compile_definitions(mimalloc-obj PRIVATE ${mi_defines})
-if(NOT WIN32 AND MI_OVERRIDE MATCHES "ON")
-  # It is only possible to override malloc on Windows when building as a DLL. (src/alloc-override.c)
-  target_compile_definitions(mimalloc-obj PRIVATE MI_MALLOC_OVERRIDE)
-endif()
-target_compile_options(mimalloc-obj PRIVATE ${mi_cflags})
-target_include_directories(mimalloc-obj PRIVATE include PUBLIC $<INSTALL_INTERFACE:include>)
-
-install(FILES ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/mimalloc-obj.dir/src/static.c${CMAKE_C_OUTPUT_EXTENSION}
-        DESTINATION ${mi_install_dir}
-        RENAME ${mi_basename}${CMAKE_C_OUTPUT_EXTENSION} )
+if(NOT BUILD_SHARED_LIBS)
+  add_library(mimalloc-obj OBJECT src/static.c)
+  target_compile_definitions(mimalloc-obj PRIVATE ${mi_defines})
+  if(NOT WIN32 AND MI_OVERRIDE MATCHES "ON")
+    # It is only possible to override malloc on Windows when building as a DLL. (src/alloc-override.c)
+    target_compile_definitions(mimalloc-obj PRIVATE MI_MALLOC_OVERRIDE)
+  endif()
+  target_compile_options(mimalloc-obj PRIVATE ${mi_cflags})
+  target_include_directories(mimalloc-obj PRIVATE include PUBLIC $<INSTALL_INTERFACE:include>)
+
+  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/mimalloc-obj.dir/src/static.c${CMAKE_C_OUTPUT_EXTENSION}
+          DESTINATION ${mi_install_dir}
+          RENAME ${mi_basename}${CMAKE_C_OUTPUT_EXTENSION} )
+endif()
+
+SET(prefix ${CMAKE_INSTALL_PREFIX})
+SET(exec_prefix ${CMAKE_INSTALL_PREFIX})
+SET(libdir ${CMAKE_INSTALL_PREFIX}/lib)
+SET(includedir ${CMAKE_INSTALL_PREFIX}/include)
+CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/mimalloc.pc.in ${CMAKE_BINARY_DIR}/mimalloc.pc @ONLY)
+INSTALL(FILES ${CMAKE_BINARY_DIR}/mimalloc.pc DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)
--- origsrc/mimalloc/mimalloc.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/mimalloc/mimalloc.pc.in	2019-06-27 13:58:45.536810600 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: mimalloc
+Description: Compact general purpose allocator with excellent performance
+Version: @PACKAGE_VERSION@
+Libs: -L${libdir} -lmimalloc
+Cflags: -I${includedir}
