--- origsrc/rocksdb-6.3.6/CMakeLists.txt	2019-10-02 09:04:43.000000000 +0900
+++ src/rocksdb-6.3.6/CMakeLists.txt	2019-10-10 11:23:57.215006700 +0900
@@ -478,7 +478,9 @@ endif()
 
 include_directories(${PROJECT_SOURCE_DIR})
 include_directories(${PROJECT_SOURCE_DIR}/include)
-include_directories(SYSTEM ${PROJECT_SOURCE_DIR}/third-party/gtest-1.7.0/fused-src)
+if (NOT CYGWIN)
+  include_directories(SYSTEM ${PROJECT_SOURCE_DIR}/third-party/gtest-1.7.0/fused-src)
+endif()
 find_package(Threads REQUIRED)
 
 # Main library source code
@@ -778,9 +780,11 @@ else()
                         OUTPUT_NAME "rocksdb")
 endif()
 
-add_library(${ROCKSDB_STATIC_LIB} STATIC ${SOURCES})
-target_link_libraries(${ROCKSDB_STATIC_LIB}
-  ${THIRDPARTY_LIBS} ${SYSTEM_LIBS})
+if (NOT BUILD_SHARED_LIBS)
+  add_library(${ROCKSDB_STATIC_LIB} STATIC ${SOURCES})
+  target_link_libraries(${ROCKSDB_STATIC_LIB}
+    ${THIRDPARTY_LIBS} ${SYSTEM_LIBS})
+endif()
 
 if(WIN32)
   add_library(${ROCKSDB_IMPORT_LIB} SHARED ${SOURCES})
@@ -834,13 +838,15 @@ if(NOT WIN32 OR ROCKSDB_INSTALL_ON_WINDO
 
   install(DIRECTORY include/rocksdb COMPONENT devel DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}")
 
-  install(
-    TARGETS ${ROCKSDB_STATIC_LIB}
-    EXPORT RocksDBTargets
-    COMPONENT devel
-    ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
-    INCLUDES DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
-  )
+  if (NOT BUILD_SHARED_LIBS)
+    install(
+      TARGETS ${ROCKSDB_STATIC_LIB}
+      EXPORT RocksDBTargets
+      COMPONENT devel
+      ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
+      INCLUDES DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
+    )
+  endif()
 
   install(
     TARGETS ${ROCKSDB_SHARED_LIB}
@@ -870,7 +876,9 @@ endif()
 
 option(WITH_TESTS "build with tests" ON)
 if(WITH_TESTS)
-  add_subdirectory(third-party/gtest-1.7.0/fused-src/gtest)
+  if (NOT CYGWIN)
+    add_subdirectory(third-party/gtest-1.7.0/fused-src/gtest)
+  endif()
   set(TESTS
         cache/cache_test.cc
         cache/lru_cache_test.cc
@@ -1098,3 +1106,10 @@ option(WITH_TOOLS "build with tools" ON)
 if(WITH_TOOLS)
   add_subdirectory(tools)
 endif()
+
+SET(prefix ${CMAKE_INSTALL_PREFIX})
+SET(exec_prefix ${CMAKE_INSTALL_PREFIX})
+SET(libdir ${CMAKE_INSTALL_PREFIX}/lib)
+SET(includedir ${CMAKE_INSTALL_PREFIX}/include)
+CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/rocksdb.pc.in ${CMAKE_BINARY_DIR}/rocksdb.pc @ONLY)
+INSTALL(FILES ${CMAKE_BINARY_DIR}/rocksdb.pc DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)
--- origsrc/rocksdb-6.3.6/db/db_wal_test.cc	2019-10-02 09:04:43.000000000 +0900
+++ src/rocksdb-6.3.6/db/db_wal_test.cc	2019-10-10 09:51:49.673217400 +0900
@@ -7,6 +7,8 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file. See the AUTHORS file for names of contributors.
 
+#include <alloca.h>
+
 #include "db/db_test_util.h"
 #include "options/options_helper.h"
 #include "port/port.h"
--- origsrc/rocksdb-6.3.6/env/env_test.cc	2019-10-02 09:04:43.000000000 +0900
+++ src/rocksdb-6.3.6/env/env_test.cc	2019-10-10 09:39:31.669692800 +0900
@@ -1354,7 +1354,7 @@ TEST_P(EnvPosixTestWithParam, Preallocat
   std::unique_ptr<WritableFile> srcfile;
   EnvOptions soptions;
   soptions.use_direct_reads = soptions.use_direct_writes = direct_io_;
-#if !defined(OS_MACOSX) && !defined(OS_WIN) && !defined(OS_SOLARIS) && !defined(OS_AIX) && !defined(OS_OPENBSD) && !defined(OS_FREEBSD)
+#if !defined(OS_MACOSX) && !defined(OS_WIN) && !defined(OS_SOLARIS) && !defined(OS_AIX) && !defined(OS_OPENBSD) && !defined(OS_FREEBSD) && !defined(__CYGWIN__)
     if (soptions.use_direct_writes) {
       rocksdb::SyncPoint::GetInstance()->SetCallBack(
           "NewWritableFile:O_DIRECT", [&](void* arg) {
@@ -1415,7 +1415,7 @@ TEST_P(EnvPosixTestWithParam, Consistent
       const std::string path =
           test::TmpDir(env_) + "/" + "testfile_" + std::to_string(i);
       std::unique_ptr<WritableFile> file;
-#if !defined(OS_MACOSX) && !defined(OS_WIN) && !defined(OS_SOLARIS) && !defined(OS_AIX) && !defined(OS_OPENBSD) && !defined(OS_FREEBSD)
+#if !defined(OS_MACOSX) && !defined(OS_WIN) && !defined(OS_SOLARIS) && !defined(OS_AIX) && !defined(OS_OPENBSD) && !defined(OS_FREEBSD) && !defined(__CYGWIN__)
       if (soptions.use_direct_writes) {
         rocksdb::SyncPoint::GetInstance()->SetCallBack(
             "NewWritableFile:O_DIRECT", [&](void* arg) {
--- origsrc/rocksdb-6.3.6/port/port_posix.h	2019-10-02 09:04:43.000000000 +0900
+++ src/rocksdb-6.3.6/port/port_posix.h	2019-10-09 22:05:56.157751200 +0900
@@ -17,7 +17,9 @@
 // in fact, we could use that one
 #define ROCKSDB_PRIszt "zu"
 
+#if !defined(__declspec)
 #define __declspec(S)
+#endif
 
 #define ROCKSDB_NOEXCEPT noexcept
 
--- origsrc/rocksdb-6.3.6/rocksdb.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/rocksdb-6.3.6/rocksdb.pc.in	2019-10-10 11:25:37.830913600 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: rocksdb
+Description: Persistent Key-Value Store for Flash and RAM Storage
+Version: @ROCKSDB_VERSION@
+Libs: -L${libdir} -lrocksdb
+Cflags: -I${includedir}
--- origsrc/rocksdb-6.3.6/util/filelock_test.cc	2019-10-02 09:04:43.000000000 +0900
+++ src/rocksdb-6.3.6/util/filelock_test.cc	2019-10-10 09:10:10.276600800 +0900
@@ -7,6 +7,7 @@
 #include "rocksdb/env.h"
 
 #include <fcntl.h>
+#include <sys/wait.h>
 #include <vector>
 #include "test_util/testharness.h"
 #include "util/coding.h"
