--- origsrc/rocksdb-6.0.2/db/db_impl.cc	2019-04-24 07:20:22.000000000 +0900
+++ src/rocksdb-6.0.2/db/db_impl.cc	2019-05-13 23:54:46.566522000 +0900
@@ -12,7 +12,7 @@
 #define __STDC_FORMAT_MACROS
 #endif
 #include <stdint.h>
-#ifdef OS_SOLARIS
+#if defined(OS_SOLARIS) || defined(__CYGWIN__)
 #include <alloca.h>
 #endif
 
--- origsrc/rocksdb-6.0.2/db/db_wal_test.cc	2019-04-24 07:20:22.000000000 +0900
+++ src/rocksdb-6.0.2/db/db_wal_test.cc	2019-05-14 10:18:51.889221500 +0900
@@ -7,6 +7,8 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file. See the AUTHORS file for names of contributors.
 
+#include <alloca.h>
+
 #include "db/db_test_util.h"
 #include "options/options_helper.h"
 #include "port/port.h"
--- origsrc/rocksdb-6.0.2/env/env_test.cc	2019-04-24 07:20:22.000000000 +0900
+++ src/rocksdb-6.0.2/env/env_test.cc	2019-05-14 10:06:34.470818100 +0900
@@ -1255,7 +1255,7 @@ TEST_P(EnvPosixTestWithParam, Preallocat
   std::unique_ptr<WritableFile> srcfile;
   EnvOptions soptions;
   soptions.use_direct_reads = soptions.use_direct_writes = direct_io_;
-#if !defined(OS_MACOSX) && !defined(OS_WIN) && !defined(OS_SOLARIS) && !defined(OS_AIX) && !defined(OS_OPENBSD) && !defined(OS_FREEBSD)
+#if !defined(OS_MACOSX) && !defined(OS_WIN) && !defined(OS_SOLARIS) && !defined(OS_AIX) && !defined(OS_OPENBSD) && !defined(OS_FREEBSD) && !defined(__CYGWIN__)
     if (soptions.use_direct_writes) {
       rocksdb::SyncPoint::GetInstance()->SetCallBack(
           "NewWritableFile:O_DIRECT", [&](void* arg) {
@@ -1316,7 +1316,7 @@ TEST_P(EnvPosixTestWithParam, Consistent
       const std::string path =
           test::TmpDir(env_) + "/" + "testfile_" + std::to_string(i);
       std::unique_ptr<WritableFile> file;
-#if !defined(OS_MACOSX) && !defined(OS_WIN) && !defined(OS_SOLARIS) && !defined(OS_AIX) && !defined(OS_OPENBSD) && !defined(OS_FREEBSD)
+#if !defined(OS_MACOSX) && !defined(OS_WIN) && !defined(OS_SOLARIS) && !defined(OS_AIX) && !defined(OS_OPENBSD) && !defined(OS_FREEBSD) && !defined(__CYGWIN__)
       if (soptions.use_direct_writes) {
         rocksdb::SyncPoint::GetInstance()->SetCallBack(
             "NewWritableFile:O_DIRECT", [&](void* arg) {
--- origsrc/rocksdb-6.0.2/env/io_posix.h	2019-04-24 07:20:22.000000000 +0900
+++ src/rocksdb-6.0.2/env/io_posix.h	2019-05-13 23:53:47.630203300 +0900
@@ -15,7 +15,7 @@
 
 // For non linux platform, the following macros are used only as place
 // holder.
-#if !(defined OS_LINUX) && !(defined CYGWIN) && !(defined OS_AIX)
+#if !(defined OS_LINUX) && !(defined __CYGWIN__) && !(defined OS_AIX)
 #define POSIX_FADV_NORMAL 0     /* [MC1] no further special treatment */
 #define POSIX_FADV_RANDOM 1     /* [MC1] expect random page refs */
 #define POSIX_FADV_SEQUENTIAL 2 /* [MC1] expect sequential page refs */
--- origsrc/rocksdb-6.0.2/port/port_posix.h	2019-04-24 07:20:22.000000000 +0900
+++ src/rocksdb-6.0.2/port/port_posix.h	2019-05-13 23:26:43.111014400 +0900
@@ -17,7 +17,9 @@
 // in fact, we could use that one
 #define ROCKSDB_PRIszt "zu"
 
+#if !defined(__declspec)
 #define __declspec(S)
+#endif
 
 #define ROCKSDB_NOEXCEPT noexcept
 
--- origsrc/rocksdb-6.0.2/util/filelock_test.cc	2019-04-24 07:20:22.000000000 +0900
+++ src/rocksdb-6.0.2/util/filelock_test.cc	2019-05-14 09:21:16.125736100 +0900
@@ -8,6 +8,7 @@
 
 #include <vector>
 #include <fcntl.h>
+#include <sys/wait.h>
 #include "util/coding.h"
 #include "util/testharness.h"
 
