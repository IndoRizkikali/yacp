--- origsrc/cpu_features-0.4.1/CMakeLists.txt	2019-07-16 20:09:50.000000000 +0900
+++ src/cpu_features-0.4.1/CMakeLists.txt	2019-07-18 07:50:25.766860300 +0900
@@ -1,6 +1,6 @@
 cmake_minimum_required(VERSION 3.0)
 
-project(CpuFeatures VERSION 0.1.0)
+project(CpuFeatures VERSION 0.3.0)
 
 set(CMAKE_C_STANDARD 99)
 
@@ -136,6 +136,10 @@ target_include_directories(cpu_features
   PUBLIC $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/cpu_features>
 )
 
+if (CYGWIN)
+  set_target_properties(cpu_features PROPERTIES SOVERSION 0)
+endif()
+
 #
 # program : list_cpu_features
 #
@@ -158,42 +162,45 @@ endif()
 
 include(CTest)
 if(BUILD_TESTING)
-  # Automatically incorporate googletest into the CMake Project if target not
-  # found.
-  if(NOT TARGET gtest OR NOT TARGET gmock_main)
-    # Download and unpack googletest at configure time.
-    configure_file(
-      cmake/googletest.CMakeLists.txt.in
-      googletest-download/CMakeLists.txt
-    )
-
-    execute_process(
-      COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" .
-      RESULT_VARIABLE result
-      WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/googletest-download)
-
-    if(result)
-      message(FATAL_ERROR "CMake step for googletest failed: ${result}")
-    endif()
-
-    execute_process(
-      COMMAND ${CMAKE_COMMAND} --build .
-      RESULT_VARIABLE result
-      WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/googletest-download)
-
-    if(result)
-      message(FATAL_ERROR "Build step for googletest failed: ${result}")
+  option(USE_SYSTEM_GTEST "use system gtest" ON)
+    if (NOT USE_SYSTEM_GTEST)
+    # Automatically incorporate googletest into the CMake Project if target not
+    # found.
+    if(NOT TARGET gtest OR NOT TARGET gmock_main)
+      # Download and unpack googletest at configure time.
+      configure_file(
+        cmake/googletest.CMakeLists.txt.in
+        googletest-download/CMakeLists.txt
+      )
+
+      execute_process(
+        COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" .
+        RESULT_VARIABLE result
+        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/googletest-download)
+
+      if(result)
+        message(FATAL_ERROR "CMake step for googletest failed: ${result}")
+      endif()
+
+      execute_process(
+        COMMAND ${CMAKE_COMMAND} --build .
+        RESULT_VARIABLE result
+        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/googletest-download)
+
+      if(result)
+        message(FATAL_ERROR "Build step for googletest failed: ${result}")
+      endif()
+
+      # Prevent overriding the parent project's compiler/linker settings on
+      # Windows.
+      set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
+
+      # Add googletest directly to our build. This defines the gtest and
+      # gtest_main targets.
+      add_subdirectory(${CMAKE_BINARY_DIR}/googletest-src
+                      ${CMAKE_BINARY_DIR}/googletest-build
+                      EXCLUDE_FROM_ALL)
     endif()
-
-    # Prevent overriding the parent project's compiler/linker settings on
-    # Windows.
-    set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
-
-    # Add googletest directly to our build. This defines the gtest and
-    # gtest_main targets.
-    add_subdirectory(${CMAKE_BINARY_DIR}/googletest-src
-                     ${CMAKE_BINARY_DIR}/googletest-build
-                     EXCLUDE_FROM_ALL)
   endif()
 
   add_subdirectory(test)
@@ -234,3 +241,10 @@ install(
   DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/CpuFeatures"
   COMPONENT Devel
 )
+
+SET(prefix ${CMAKE_INSTALL_PREFIX})
+SET(exec_prefix ${CMAKE_INSTALL_PREFIX})
+SET(libdir ${CMAKE_INSTALL_PREFIX}/lib)
+SET(includedir ${CMAKE_INSTALL_PREFIX}/include)
+CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/cpu_features.pc.in ${CMAKE_BINARY_DIR}/cpu_features.pc @ONLY)
+INSTALL(FILES ${CMAKE_BINARY_DIR}/cpu_features.pc DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)
--- origsrc/cpu_features-0.4.1/cpu_features.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/cpu_features-0.4.1/cpu_features.pc.in	2019-07-18 07:50:25.782476100 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: cpu_features
+Description: Cross platform C99 library to get cpu features at runtime
+Version: @PROJECT_VERSION@
+Libs: -L${libdir} -lcpu_features
+Cflags: -I${includedir}/cpu_features
--- origsrc/cpu_features-0.4.1/test/CMakeLists.txt	2019-07-16 20:09:50.000000000 +0900
+++ src/cpu_features-0.4.1/test/CMakeLists.txt	2019-07-18 07:50:25.892154000 +0900
@@ -2,9 +2,11 @@
 # libraries for tests
 #
 
-set(CMAKE_CXX_STANDARD 11)
-set(CMAKE_CXX_STANDARD_REQUIRED ON)
-set(CMAKE_CXX_EXTENSIONS OFF) # prefer use of -std11 instead of -gnustd11
+if (NOT CYGWIN)
+  set(CMAKE_CXX_STANDARD 11)
+  set(CMAKE_CXX_STANDARD_REQUIRED ON)
+  set(CMAKE_CXX_EXTENSIONS OFF) # prefer use of -std11 instead of -gnustd11
+endif()
 
 include_directories(../include)
 add_definitions(-DCPU_FEATURES_TEST)
@@ -17,11 +19,11 @@ target_compile_definitions(filesystem_fo
 ##------------------------------------------------------------------------------
 add_library(hwcaps_for_testing hwcaps_for_testing.cc)
 target_compile_definitions(hwcaps_for_testing PUBLIC CPU_FEATURES_MOCK_GET_ELF_HWCAP_FROM_GETAUXVAL)
-target_link_libraries(hwcaps_for_testing filesystem_for_testing)
+target_link_libraries(hwcaps_for_testing string_view filesystem_for_testing)
 ##------------------------------------------------------------------------------
 add_library(stack_line_reader ../src/stack_line_reader.c)
 target_compile_definitions(stack_line_reader PUBLIC STACK_LINE_READER_BUFFER_SIZE=1024)
-target_link_libraries(stack_line_reader string_view)
+target_link_libraries(stack_line_reader string_view filesystem_for_testing)
 ##------------------------------------------------------------------------------
 add_library(stack_line_reader_for_test ../src/stack_line_reader.c)
 target_compile_definitions(stack_line_reader_for_test PUBLIC STACK_LINE_READER_BUFFER_SIZE=16)
