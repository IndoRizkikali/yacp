--- origsrc/kitchen_sync-1.10/CMakeLists.txt	2019-01-09 09:30:34.000000000 +0900
+++ src/kitchen_sync-1.10/CMakeLists.txt	2019-01-17 22:31:19.888488600 +0900
@@ -9,12 +9,14 @@ CHECK_CXX_COMPILER_FLAG("-std=c++14" COM
 CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
 CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
 CHECK_CXX_COMPILER_FLAG("-stdlib=libc++" COMPILER_SUPPORTS_STDLIB)
-if(COMPILER_SUPPORTS_CXX14)
-	ADD_DEFINITIONS("-std=c++14")
-elseif(COMPILER_SUPPORTS_CXX11)
-	ADD_DEFINITIONS("-std=c++11")
-elseif(COMPILER_SUPPORTS_CXX0X)
-	ADD_DEFINITIONS("-std=c++0x")
+if(NOT CYGWIN)
+	if(COMPILER_SUPPORTS_CXX14)
+		ADD_DEFINITIONS("-std=c++14")
+	elseif(COMPILER_SUPPORTS_CXX11)
+		ADD_DEFINITIONS("-std=c++11")
+	elseif(COMPILER_SUPPORTS_CXX0X)
+		ADD_DEFINITIONS("-std=c++0x")
+	endif()
 endif()
 if(COMPILER_SUPPORTS_STDLIB)
 	ADD_DEFINITIONS("-stdlib=libc++")
@@ -47,8 +49,10 @@ find_package(Threads)
 set(YAML_CPP_BUILD_TESTS OFF CACHE BOOL "disable yaml tests")
 set(YAML_CPP_BUILD_TOOLS OFF CACHE BOOL "disable yaml tools")
 set(YAML_CPP_BUILD_CONTRIB OFF CACHE BOOL "disable yaml contrib")
-add_subdirectory(src/yaml-cpp EXCLUDE_FROM_ALL)
-include_directories(src/yaml-cpp/include)
+if(NOT CYGWIN)
+	add_subdirectory(src/yaml-cpp EXCLUDE_FROM_ALL)
+	include_directories(src/yaml-cpp/include)
+endif()
 set(YamlCPP_LIBRARIES yaml-cpp)
 
 # the main program knows nothing but how to hook up the endpoints
@@ -64,7 +68,7 @@ if(NOT APPLE)
 endif()
 
 # is backtrace in libc?
-if(NOT APPLE)
+if(NOT APPLE AND NOT CYGWIN)
 	find_package(Backtrace)
 endif()
 
@@ -72,9 +76,12 @@ if(Backtrace_FOUND OR APPLE)
 	ADD_DEFINITIONS("-DUSE_BACKTRACE")
 endif()
 
+include(FindPkgConfig)
+pkg_check_modules(XXHASH REQUIRED xxhash)
+
 # the endpoints do the actual work
-set(ks_endpoint_SRCS src/schema.cpp src/subdivision.cpp src/filters.cpp src/abortable_barrier.cpp src/xxHash/xxhash.cpp)
-set(ks_endpoint_LIBS ${OPENSSL_LIBRARIES} ${YamlCPP_LIBRARIES})
+set(ks_endpoint_SRCS src/schema.cpp src/subdivision.cpp src/filters.cpp src/abortable_barrier.cpp)
+set(ks_endpoint_LIBS ${OPENSSL_LIBRARIES} ${YamlCPP_LIBRARIES} ${XXHASH_LIBRARIES})
 
 # turn on debugging symbols
 set(CMAKE_BUILD_TYPE Debug)
--- origsrc/kitchen_sync-1.10/test/CMakeLists.txt	2019-01-09 09:30:34.000000000 +0900
+++ src/kitchen_sync-1.10/test/CMakeLists.txt	2019-01-17 22:34:02.193291100 +0900
@@ -3,18 +3,20 @@ set(CMAKE_CXX_FLAGS "") # disable the sa
 add_executable(ks_unit_tests ks_unit_tests.cpp db_url_test.cpp ../src/db_url.cpp basic_uint128_t_test.cpp)
 add_test(unit_tests          ks_unit_tests)
 
+include_directories(${CMAKE_SOURCE_DIR})
+
 # the main tests require ruby (and various extra gems).  to run the suite, run
-#   cmake .. && CTEST_OUTPUT_ON_FAILURE=1 make test
-add_test(prepare_for_test        env BUNDLE_GEMFILE=../../test/Gemfile bundle install --quiet)
-add_test(protocol_version_test   env BUNDLE_GEMFILE=../../test/Gemfile bundle exec ruby ../../test/protocol_version_test.rb)
-add_test(snapshot_from_test      env BUNDLE_GEMFILE=../../test/Gemfile bundle exec ruby ../../test/snapshot_from_test.rb)
-add_test(schema_from_test        env BUNDLE_GEMFILE=../../test/Gemfile bundle exec ruby ../../test/schema_from_test.rb)
-add_test(schema_to_test          env BUNDLE_GEMFILE=../../test/Gemfile bundle exec ruby ../../test/schema_to_test.rb)
-add_test(range_from_test         env BUNDLE_GEMFILE=../../test/Gemfile bundle exec ruby ../../test/range_from_test.rb)
-add_test(hash_from_test          env BUNDLE_GEMFILE=../../test/Gemfile bundle exec ruby ../../test/hash_from_test.rb)
-add_test(rows_from_test          env BUNDLE_GEMFILE=../../test/Gemfile bundle exec ruby ../../test/rows_from_test.rb)
-add_test(filter_from_test        env BUNDLE_GEMFILE=../../test/Gemfile bundle exec ruby ../../test/filter_from_test.rb)
-add_test(filter_to_test          env BUNDLE_GEMFILE=../../test/Gemfile bundle exec ruby ../../test/filter_to_test.rb)
-add_test(column_types_to_test    env BUNDLE_GEMFILE=../../test/Gemfile bundle exec ruby ../../test/column_types_to_test.rb)
-add_test(column_types_from_test  env BUNDLE_GEMFILE=../../test/Gemfile bundle exec ruby ../../test/column_types_from_test.rb)
-add_test(sync_to_test            env BUNDLE_GEMFILE=../../test/Gemfile bundle exec ruby ../../test/sync_to_test.rb)
+#   cmake ${CMAKE_SOURCE_DIR} && CTEST_OUTPUT_ON_FAILURE=1 make test
+add_test(prepare_for_test        env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle install --quiet)
+add_test(protocol_version_test   env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/protocol_version_test.rb)
+add_test(snapshot_from_test      env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/snapshot_from_test.rb)
+add_test(schema_from_test        env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/schema_from_test.rb)
+add_test(schema_to_test          env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/schema_to_test.rb)
+add_test(range_from_test         env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/range_from_test.rb)
+add_test(hash_from_test          env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/hash_from_test.rb)
+add_test(rows_from_test          env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/rows_from_test.rb)
+add_test(filter_from_test        env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/filter_from_test.rb)
+add_test(filter_to_test          env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/filter_to_test.rb)
+add_test(column_types_to_test    env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/column_types_to_test.rb)
+add_test(column_types_from_test  env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/column_types_from_test.rb)
+add_test(sync_to_test            env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/sync_to_test.rb)
--- origsrc/kitchen_sync-1.10/test/basic_uint128_t_test.cpp	2019-01-09 09:30:34.000000000 +0900
+++ src/kitchen_sync-1.10/test/basic_uint128_t_test.cpp	2019-01-17 22:33:34.021704700 +0900
@@ -1,6 +1,6 @@
-#include "../../catch2/catch.hpp"
+#include "src/catch2/catch.hpp"
 
-#include "../src/basic_uint128_t.h"
+#include "src/basic_uint128_t.h"
 
 TEST_CASE("addition", "[basic_uint128_t]") {
 	REQUIRE(basic_uint128_t{0, 1} + basic_uint128_t{0, 1} == basic_uint128_t{0, 2});
--- origsrc/kitchen_sync-1.10/test/db_url_test.cpp	2019-01-09 09:30:34.000000000 +0900
+++ src/kitchen_sync-1.10/test/db_url_test.cpp	2019-01-17 22:34:28.934274000 +0900
@@ -1,6 +1,6 @@
-#include "../../catch2/catch.hpp"
+#include "src/catch2/catch.hpp"
 
-#include "../src/db_url.h"
+#include "src/db_url.h"
 
 TEST_CASE("parsing full URLs", "[db_url]") {
 	DbUrl url("postgresql://someuser:mypassword@localhost:1000/sourcedb");
--- origsrc/kitchen_sync-1.10/test/ks_unit_tests.cpp	2019-01-09 09:30:34.000000000 +0900
+++ src/kitchen_sync-1.10/test/ks_unit_tests.cpp	2019-01-17 22:34:44.328979400 +0900
@@ -1,2 +1,2 @@
 #define CATCH_CONFIG_MAIN
-#include "../../catch2/catch.hpp"
+#include "src/catch2/catch.hpp"
