--- origsrc/pcl-pcl-1.9.1/CMakeLists.txt	2018-11-26 20:50:33.000000000 +0900
+++ src/pcl-pcl-1.9.1/CMakeLists.txt	2019-06-17 18:20:58.239718900 +0900
@@ -286,6 +286,12 @@ endif()
 find_package(FLANN 1.7.0 REQUIRED)
 include_directories(${FLANN_INCLUDE_DIRS})
 
+if (CYGWIN AND FLANN_FOUND)
+  pkg_check_modules(LIBLZ4 liblz4 REQUIRED)
+  include_directories(${LIBLZ4_INCLUDE_DIRS})
+  set(FLANN_LIBRARIES ${FLANN_LIBRARIES} ${LIBLZ4_LIBRARIES})
+endif()
+
 # libusb-1.0
 option(WITH_LIBUSB "Build USB RGBD-Camera drivers" TRUE)
 if(WITH_LIBUSB)
--- origsrc/pcl-pcl-1.9.1/cmake/pcl_utils.cmake	2018-11-26 20:50:33.000000000 +0900
+++ src/pcl-pcl-1.9.1/cmake/pcl_utils.cmake	2019-06-17 18:20:58.270857400 +0900
@@ -109,6 +109,8 @@ macro(SET_INSTALL_DIRS)
     set(PKGCFG_INSTALL_DIR "${LIB_INSTALL_DIR}/pkgconfig")
     if(WIN32 AND NOT MINGW)
         set(PCLCONFIG_INSTALL_DIR "cmake")
+    elseif(CYGWIN)
+        set(PCLCONFIG_INSTALL_DIR "lib/cmake/${PROJECT_NAME}")
       else(WIN32 AND NOT MINGW)
         set(PCLCONFIG_INSTALL_DIR "share/${PROJECT_NAME_LOWER}-${PCL_VERSION_MAJOR}.${PCL_VERSION_MINOR}")
       endif(WIN32 AND NOT MINGW)
--- origsrc/pcl-pcl-1.9.1/common/include/pcl/pcl_exports.h	2018-11-26 20:50:33.000000000 +0900
+++ src/pcl-pcl-1.9.1/common/include/pcl/pcl_exports.h	2019-06-17 18:20:58.302130300 +0900
@@ -39,7 +39,7 @@
 // Header 'pcl_macros' is not suitable since it includes <Eigen/Core>,
 // which can't be eaten by nvcc (it's too weak)
 
-#if defined WIN32 || defined _WIN32 || defined WINCE || defined __MINGW32__
+#if defined WIN32 || defined _WIN32 || defined WINCE || defined __MINGW32__ || defined(__CYGWIN__)
     #ifdef PCLAPI_EXPORTS
         #define PCL_EXPORTS __declspec(dllexport)
     #else
--- origsrc/pcl-pcl-1.9.1/common/include/pcl/pcl_macros.h	2018-11-26 20:50:33.000000000 +0900
+++ src/pcl-pcl-1.9.1/common/include/pcl/pcl_macros.h	2019-06-17 18:20:58.317747900 +0900
@@ -267,7 +267,7 @@ log2f (float x)
     #endif
 #endif
 
-#if defined WIN32 || defined _WIN32 || defined WINCE || defined __MINGW32__
+#if defined WIN32 || defined _WIN32 || defined WINCE || defined __MINGW32__ || defined(__CYGWIN__)
     #ifdef PCLAPI_EXPORTS
         #define PCL_EXPORTS __declspec(dllexport)
     #else
@@ -388,7 +388,7 @@ log2f (float x)
   #define FREEBSD_MALLOC_ALIGNED 0
 #endif
 
-#if defined(__APPLE__) || defined(_WIN64) || GLIBC_MALLOC_ALIGNED || FREEBSD_MALLOC_ALIGNED
+#if defined(__APPLE__) || defined(_WIN64) || GLIBC_MALLOC_ALIGNED || FREEBSD_MALLOC_ALIGNED || defined(__CYGWIN__)
   #define MALLOC_ALIGNED 1
 #endif
 
--- origsrc/pcl-pcl-1.9.1/common/include/pcl/range_image/range_image.h	2018-11-26 20:50:33.000000000 +0900
+++ src/pcl-pcl-1.9.1/common/include/pcl/range_image/range_image.h	2019-06-17 18:20:58.364630700 +0900
@@ -784,10 +784,10 @@ namespace pcl
 
 
       // =====STATIC PROTECTED=====
-      static const int lookup_table_size;
-      static std::vector<float> asin_lookup_table;
-      static std::vector<float> atan_lookup_table;
-      static std::vector<float> cos_lookup_table;
+      PCL_EXPORTS static const int lookup_table_size;
+      PCL_EXPORTS static std::vector<float> asin_lookup_table;
+      PCL_EXPORTS static std::vector<float> atan_lookup_table;
+      PCL_EXPORTS static std::vector<float> cos_lookup_table;
       /** Create lookup tables for trigonometric functions */
       static void
       createLookupTables ();
--- origsrc/pcl-pcl-1.9.1/io/include/pcl/io/low_level_io.h	2018-11-26 20:50:33.000000000 +0900
+++ src/pcl-pcl-1.9.1/io/include/pcl/io/low_level_io.h	2019-06-17 18:20:58.380286600 +0900
@@ -61,6 +61,7 @@ typedef SSIZE_T ssize_t;
 # include <sys/stat.h>
 # include <sys/fcntl.h>
 # include <cerrno>
+# include <fcntl.h>
 #endif
 
 namespace pcl
--- origsrc/pcl-pcl-1.9.1/outofcore/CMakeLists.txt	2018-11-26 20:50:33.000000000 +0900
+++ src/pcl-pcl-1.9.1/outofcore/CMakeLists.txt	2019-06-18 08:56:58.656191100 +0900
@@ -8,9 +8,10 @@ PCL_SUBSYS_DEPEND(build "${SUBSYS_NAME}"
 
 PCL_ADD_DOC("${SUBSYS_NAME}")
 
+PKG_CHECK_MODULES(LIBCJSON libcjson)
+
 if(build)
     set(srcs
-        src/cJSON.cpp
         src/outofcore_node_data.cpp
         src/outofcore_base_data.cpp
         )
@@ -59,7 +60,7 @@ if(build)
     include_directories("${CMAKE_CURRENT_SOURCE_DIR}/include")
     PCL_ADD_LIBRARY("${LIB_NAME}" "${SUBSYS_NAME}" ${srcs} ${incs} ${impl_incs} ${visualization_incs})
     #PCL_ADD_SSE_FLAGS("${LIB_NAME}")
-    target_link_libraries("${LIB_NAME}" pcl_common pcl_visualization ${Boost_SYSTEM_LIBRARY})
+    target_link_libraries("${LIB_NAME}" pcl_common pcl_visualization ${Boost_SYSTEM_LIBRARY} ${LIBCJSON_LIBRARIES})
     PCL_MAKE_PKGCONFIG("${LIB_NAME}" "${SUBSYS_NAME}" "${SUBSYS_DESC}" "${SUBSYS_DEPS}" "" "" "" "")
 
     # Install include files
--- origsrc/pcl-pcl-1.9.1/test/CMakeLists.txt	2018-11-26 20:50:33.000000000 +0900
+++ src/pcl-pcl-1.9.1/test/CMakeLists.txt	2019-06-17 18:20:58.395871300 +0900
@@ -7,12 +7,17 @@ PCL_SUBSYS_OPTION(build "${SUBSYS_NAME}"
 PCL_SUBSYS_DEPEND(build "${SUBSYS_NAME}" DEPS ${SUBSYS_DEPS} OPT_DEPS ${OPT_DEPS})
 
 if(build)
+    option(USE_SYSTEM_GTEST "use system gtest" ON)
+    if(USE_SYSTEM_GTEST)
+        add_library(pcl_gtest INTERFACE)
+        target_link_libraries(pcl_gtest INTERFACE gtest gtest_main)        
+    else()
+        find_package(Gtest REQUIRED)
+        include_directories(SYSTEM ${GTEST_INCLUDE_DIRS} ${GTEST_SRC_DIR})
 
-    find_package(Gtest REQUIRED)
-    include_directories(SYSTEM ${GTEST_INCLUDE_DIRS} ${GTEST_SRC_DIR})
+        add_library(pcl_gtest STATIC ${GTEST_SRC_DIR}/src/gtest-all.cc)
+    endif()
 
-    add_library(pcl_gtest STATIC ${GTEST_SRC_DIR}/src/gtest-all.cc)
-	
     if( MSVC11 ) # VS2012 doesn't correctly support variadic templates yet
         add_definitions("-D_VARIADIC_MAX=10")
     endif()
